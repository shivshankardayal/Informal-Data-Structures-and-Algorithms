<d:preface version="5.0" xmlns:d="http://docbook.org/ns/docbook"
           xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
           xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <?xml-stylesheet href="../css/style.css" type="text/css"?>
  <?dbhtml filename="preface/index.html" ?>
  <d:title>Preface</d:title>
  <d:para>
    This book is a natural successor of my C programming book. There is no
    doubt about that data structures and algorithms is one of the most critical
    subjects in computer science. Computer programming has changed a lot in
    last few decades. Programmers typically do not implement basic data
    structures in real-world code but rather they use ready-made libraries
    which are of very high quality. However, that does not decrease the
    importance of the subject. The importance is same even though a lot in
    programming world has changed and there will be times when you would want
    to implement your own version of data structures and algorithms. Another
    point is that for a programmer this subject allows one to exercise his
    knowledge of programming language to various problems this subject offers.
    To really appreciate the library code you must know the inner working of
    the data structure and algorithm implemented by that library.
  </d:para>
  <d:para>
    One of the critical learnings from this subject which you, the reader, will
    learn is complexity computation. I am sure that you will certainly
    appreciate the value of knowledge after learning it. I cannot put enough
    stress on the importance of data structures and algorithms. The application
    of data structures and algorithms is there in almost all branches of
    computer science without exception. Any program you write will involve some
    algorithm and data structure. The importance of data structure and
    algorithms can be found from the title of the book on the subject, written
    by one of the great programmers Niklaus Wirth who created several languages
    most famous being Pascal, <d:quote>Algorithms + Data Structures =
    Programs</d:quote>.
  </d:para>
  <d:simplesect>
    <d:title>Why I Wrote This Book?</d:title>
    <d:para>
      I wrote this book for myself! There are a lot of excellent books which
      cover a lot of material but they are all spread and not put together. I
      have attempted to put what I have learned and learning in this book. Any
      other usage of this book is a side effect which was not intended.
    </d:para>
    <d:para>
      There are two things presented in the book. One is abstract concept while
      the other is concrete code. If you are a beginner it may be hard to grasp
      the abstract concepts but I believe as you will gain knowledge as you go
      through the book you should be able to understand the abstract concepts
      with ease.
    </d:para>
  </d:simplesect>
  <d:simplesect>
    <d:title>How to Read This Book?</d:title>
    <d:para>
      As always start form beginning and try not to skip. Even if you know the
      topic, try to read it through as you will learn something out of text
      written. If there is a mathematical problem then try to solve using pen
      and paper and if it is a programming problem then try to implement
      it. Without solving problems given in the book you will not go
      far. Problem solving is an essential activity no matter what subject you
      read and you will find the same advice in all the books. If you do not
      understand a topic then you can skip the material for time being and come
      later or take a break from studies go out and come back and try again.
    </d:para>
    <d:para>
      Certain chapters in the book will contain specific material dedicated to
      that particular topic. You can read those if you are solely interested in
      that topic and nothing else. This book contains a lot of code and you
      must read it else you will lose the implementation knowledge. All the
      concepts are explained with a lot of examples and problems are given at
      the end of chapter for practice. Solutions of selected problems are given
      at the end of book. Please try to solve problems by yourself and once you
      have exhausted only then look at solutions. Problems vary in complexity
      and detail. Some are trivial to implement while others are harder. I have
      tried to maintain balance between mathematical concepts, abstract
      concepts and implementation part.
    </d:para>
  </d:simplesect>
  <d:simplesect>
    <d:title>Who Should Read This Book?</d:title>
    <d:para>
      Anyone casually interested in programming should read this book. This
      book intends to present the subject in a manner so that it can be used
      both as a tutorial and reference on the subject matter. If you know any
      programming language, you should be able to easily follow the
      book. If you are already an experienced programmer then you can read
     selected topics as needed.
    </d:para>
  </d:simplesect>
  <d:simplesect>
    <d:title>Prerequisite</d:title>
    <d:para>
      I have written code using C programming language using <d:code>gcc</d:code>
      following C11 standards. Thus, you should get fairly modern compiler. I
      would recommend the one which comes with your GNU/Linux distribution. Just
      make sure that your GNU/Linux distribution is a recent one. Although, I
      have used <d:code>gcc</d:code> to compile the code, code is portable to
      any C compiler which supports C99 at least. It is assumed that you are
      familiar with C programming language(later C++ examples will also be
      provided). Since algorithms involve complexity computation, thus some
      mathematics is definitely going to be involved. It is assumed that you
      are familiar with high school mathematics at least. However, necessary
      mathematics in last part will be provided with the book so as you, my
      dear reader, won't have to search for another book. I have found that
      people usually lack mathematical skill to study data structures and
      algorithms in depth and they think that data structures and algorithms
      are a programming course. While it is true that you need to program, but
      solid mathematical understanding is required for fully understanding the
      beauty of this subject.
    </d:para>
    <d:para>
      I have chosen C to implement the solutions because C compilers are
      available for many platforms and C is one of the languages which most
      people know. Also, C is usually a language which is taught at all the
      universities to students. One big advantage of C is its simplicity and
      thus it is very easy to predict the assembly generated from C code. As
      Donald Knuth says that machine language is very important for programmers
      and therefore he designed MIX and later MMIX computers and uses assembly
      to write <d:quote>The Art of Computer Programming</d:quote>, I think C is
      a portable assembler. If you know your compiler well, it is very easy to
      know equivalent assembly. C as a language is simple enough so as it is
      easy to learn it and is quite powerful. At the same time C does not get
      in your way. For example, if I use C++ then I would have to give
      overloaded assignment operator and copy constructor for each data
      structure because programs will not behave correctly otherwise.
    </d:para>
    <d:para>
      Also, note that some sections have requirement of knowledge of assembly
      for x86-64 architecture. You can refer to manual of your CPU which will
      detail the instruction set. Although, I have tried to minimize the
      dependency for such code sometimes it is inevitable to look at machine
      code. You can skip that as it is not really critical but yes it does
      contain the gory details.
    </d:para>
  </d:simplesect>
  <d:simplesect>
    <d:title>Goals for Readers</d:title>
    <d:para>
      From my experience I have found that most of the people study books on
      data structures, algorithms or mathematics for two purposes. First, when
      it is part of some course and second when they have to attend some
      interview. While not all people do it for the same purpose and that it is
      the kind of people who read it for knowledge. While it is true that you
      will probably never implement most of these data structures at
      professional level but at the same time even to use libraries you have to
      have the knowledge and make judicious usage of those libraries for the
      problems you are trying to solve.
    </d:para>
    <d:para>
      It is easy to acquire the knowledge by reading a book like this one or
      for that matter any other such book. But the judgment as to what to do
      for a particular problem comes through experience. And experience is not
      linear for everyone. A person with 2 years work may have more experience
      than a person with 10 years of experience because experience is a lot
      about intelligence and wisdom which is different for each
      individual. However, that is the philosophical part of it. The sad part
      is if you are looking for a job then no. of years of experience on your
      resume matters. Please make sure you read excellent examples of code for
      example, if you are thinking of C then glib (from GNOME project) and
      glibc (the C library) are excellent examples as how data structures are
      implemented. If you are a C++ programmer then STL is a very good example
      for you.
    </d:para>
    <d:para>
      All of us possess a certain level of intelligence. At average any person
      can read this book. But what is most important is you have to have
      interest in the subject. Your interest gets multiplied with your
      intelligence and thus you will be more capable than you think you can
      be. One more point is focus and effort. It is not something new which I
      am telling but I am saying it again just to emphasize the point. Trust me
      if you are reading this book for just scoring a nice grade in your course
      or cracking an interview at a big company then I have failed 
      in my purpose of explaining my ideas.
    </d:para>
  </d:simplesect>
  <d:simplesect>
    <d:title>Acknowledgments</d:title>
    <d:para>
      As with any book there are a lot of people involved with this book but
      not in traditional sense of a typical book. I have written this book
      using Docbook thus Norman Walsh deserves
      praise. <d:code>xsltproc</d:code> has been used to process
      <d:code>xml</d:code> to <d:code>html</d:code> and it is a wonderful piece
      of software written by James Clark. Dennis Ritchie as always deserve
      praise for creating such a wonderful language as C. Richard Stallman and
      all people who contribute to Free(as in freedom not beer) Software
      definitely are heroes of humanity.
    </d:para>
    <d:para>
      There are a lot of diagrams in this text and those have been drawn using
      Tikz. Thanks for its developers Till Tantau and Christian Feuersaenger
      along with all the contributors for creating such a wonderful piece of
      vector graphics library for TeX.
    </d:para>
    <d:para>
      I must say thanks to my family particularly to my parents, wife and my
      son whose precious time I have taken to write this book and gave them
      numerous trouble in general. They have been the major force which
      supported while writing it. This book would not have been possible
      without their support.
    </d:para>
    <d:para>
      There have been many teachers in my life who have helped me with various
      lessons in life and otherwise. I will try to remember all of them here
      and seek forgiveness if I miss anyone. My math teachers Yogendra Yadav,
      Hriday Nayaran Singh and Satyanand Satyarthi have helped me a lot with
      basics of Mathematics. Anurag Johri, Sirnivasa Kotu, Shreyas Majthia and
      Mufti Mohammed for their technical discussions and insight into
      programming. My professors S. Sen, S. Sengupta and T. K. Basu for showing
      faith in me during troubled times.
    </d:para>
    <d:para>
      I am not native English speaker and it has gone through only one pair of
      eyes thus you should expect all kind of errors, particularly related to
      punctuation. I would be glad if you could report all errors, suggestions
      and feedback to me at <d:email>shivshankar.dayal@gmail.com</d:email>. I
      would be happy to incorporate those.
    </d:para>
    <d:para>
      Although I would like to give a pdf version of the book for download but
      the content keep changing and there will be just too many versions of the
      book. Thus, please read html version until a final release can be done.
    </d:para>
  </d:simplesect>
</d:preface>
